diff --git i/osc/osc.go w/osc/osc.go
index e480660..835cb87 100644
--- i/osc/osc.go
+++ w/osc/osc.go
@@ -140,8 +140,8 @@ type OscServer struct {
 	Port        int            // Port to listen on
 	ReadTimeout time.Duration  // Read Timeout
 	dispatcher  *OscDispatcher // Dispatcher that dispatches OSC packets/messages
-	running     bool
-	conn        *net.UDPConn
+	running     bool           // Flag to store if the server is running or not
+	conn        *net.UDPConn   // UDP connection object
 }
 
 // OscTimetag represents an OSC Time Tag.
diff --git i/osc/osc_test.go w/osc/osc_test.go
index f515d5d..d93a16c 100644
--- i/osc/osc_test.go
+++ w/osc/osc_test.go
@@ -8,11 +8,33 @@ import (
 	"time"
 )
 
-func TestAddMsgHandlerWithInvalidAddress(t *testing.T) {
-	server := NewOscServer("localhost", 6677)
-	err := server.AddMsgHandler("/address*/test", func(msg *OscMessage) {})
-	if err == nil {
-		t.Error("Expected error with '/address*/test'")
+func TestAppendArguments(t *testing.T) {
+	oscAddress := "/address"
+	message := NewOscMessage(oscAddress)
+	if message.Address != oscAddress {
+		t.Errorf("OSC address should be \"%s\" and is \"%s\"", oscAddress, message.Address)
+	}
+
+	message.Append("string argument")
+	message.Append(123456789)
+	message.Append(true)
+
+	if message.CountArguments() != 3 {
+		t.Errorf("Number of arguments should be %d and is %d", 3, message.CountArguments())
+	}
+}
+
+func TestEqualMessage(t *testing.T) {
+	msg1 := NewOscMessage("/address")
+	msg2 := NewOscMessage("/address")
+
+	msg1.Append(1234)
+	msg2.Append(1234)
+	msg1.Append("test string")
+	msg2.Append("test string")
+
+	if !msg1.Equals(msg2) {
+		t.Error("Messages should be equal")
 	}
 }
 
@@ -24,6 +46,14 @@ func TestAddMsgHandler(t *testing.T) {
 	}
 }
 
+func TestAddMsgHandlerWithInvalidAddress(t *testing.T) {
+	server := NewOscServer("localhost", 6677)
+	err := server.AddMsgHandler("/address*/test", func(msg *OscMessage) {})
+	if err == nil {
+		t.Error("Expected error with '/address*/test'")
+	}
+}
+
 func TestServerMessageDispatching(t *testing.T) {
 	finish := make(chan bool)
 	start := make(chan bool)
@@ -173,7 +203,19 @@ func TestReadPaddedString(t *testing.T) {
 }
 
 func TestWritePaddedString(t *testing.T) {
+	buf := []byte{}
+	bytesBuffer := bytes.NewBuffer(buf)
+	testString := "testString"
+	expectedNumberOfWrittenBytes := len(testString) + padBytesNeeded(len(testString))
+
+	n, err := writePaddedString(testString, bytesBuffer)
+	if err != nil {
+		t.Errorf(err.Error())
+	}
 
+	if n != expectedNumberOfWrittenBytes {
+		t.Errorf("Expected number of written bytes should be \"%d\" and is \"%d\"", expectedNumberOfWrittenBytes, n)
+	}
 }
 
 func TestPadBytesNeeded(t *testing.T) {
